from collections import deque
class Solution:
    def RowCol(self, curr, n):
        
        r, c = divmod(curr-1, n)  # Display the quotient and the remainder 
        
        if r%2 == 0:
            return (n-1-r, c)
        else:
            return (n-1-r, n-1-c) # if row in which curr is located is even  
        
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        
        minsteps = 0
        n = len(board)
        start, end = 1, n*n
        visited = [[False for j in range(n)] for i in range(n)]
        
        queue = deque()
        visited[n-1][0] = True
        queue.append(start)
        
        while queue:
            size = len(queue)
            
            for i in range(size):
                current_pos = queue.popleft()
                if current_pos == end:
                    return minsteps
                
                
                for dice in range(1, 7):
                    if current_pos + dice > end:
                        break
                    next_row, next_col = self.RowCol(current_pos + dice, n)
                    if not visited[next_row][next_col]:
                        visited[next_row][next_col] = True
                        if board[next_row][next_col] != -1:
                            queue.append(board[next_row][next_col])
                        else:
                            queue.append(current_pos + dice)
                        
            minsteps += 1
        return -1
