
class Solution:
    
    def dfs(self, node, par, vis, tin, low, adj, timer, c, d):
        
        vis[node] = 1
        tin[node] = low[node] = timer
        timer += 1
        
        for it in adj[node]:
            if it == par:
                continue
            if vis[it] == 0:
                if self.dfs(it, node, vis, tin, low, adj, timer, c, d):
                    return 1
                low[node] = min(low[node], low[it])
                if low[it] > tin[node]:
                    if node == c and it == d or node == d and it == c:
                        return 1
            else:
                low[node] = min(low[node], low[it])
        
        return 0
        
    def isBridge(self, V, adj, c, d):
    
        vis = [0]*V
        tin = [0]*V
        low = [0]*V
        timer = 0
        
        for i in range(V):
            if vis[i] == 0:
                if self.dfs(i, -1, vis, tin, low, adj, timer, c, d):
                    return 1
        return 0
        
        
        
        
        
        
                
