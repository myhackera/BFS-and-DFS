class Solution:
    def dfs(self, node, adj, color):
        
        if color[node] == -1:
            color[node] = 1
        
        for neighbour in adj[node]:
            if color[neighbour] == -1:
                color[neighbour] = 1-color[node]
                if not self.dfs(neighbour, adj, color):
                    return False
            elif color[neighbour] == color[node]:
                return False
            
        return True

    
    def isBipartite(self, graph: List[List[int]]) -> bool:
        
        adj = {}
        for i in range(len(graph)):
            adj[i] = graph[i]
            
        color = [-1]*len(graph)
        
        for i in range(len(graph)):
            if color[i] == -1:
                if not self.dfs(i, adj, color):
                    return False
        return True
