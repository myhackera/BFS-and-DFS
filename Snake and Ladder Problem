from collections import deque
class Solution:
    def minThrow(self, N, arr):
        
        vis = [0 for _ in range(1, 31)]
        found = False
        snak = {}
        lad = {}
        
        for i in range(0, 2*N-1, 2):
            if arr[i+1] > arr[i]:
                lad[arr[i]] = arr[i+1]
            else:
                snak[arr[i]] = arr[i+1]
            
        q = deque()
        q.append(1)
        count = 0
        
        while q and not found:
            
            sz = len(q)
            for _ in range(sz):
                tmp = q.popleft()
                
                for i in range(1, 7):
                    
                    if tmp+i == 30:
                        found = True
                        
                    # if ladder is found
                    elif tmp+i <= 30 and tmp+i in lad and not vis[lad[tmp+i]]:
                        vis[lad[tmp+i]] = True
                        if lad[tmp+i] == 30:
                            found = True
                        q.append(lad[tmp+i])
                        
                    # if snake is found
                    elif tmp+i <= 30 and tmp+i in snak and not vis[snak[tmp+i]]:
                        vis[snak[tmp+i]] = True
                        if snak[tmp+i] == 30:
                            found = True
                        q.append(snak[tmp+i])
                        
                    # if neither ladder nor snake is found
                    elif tmp+i <= 30 and tmp+i not in lad and tmp+i not in snak and not vis[tmp+i]:
                        vis[tmp+i] = True
                        q.append(tmp+i)
            
            count += 1
        
        return count
