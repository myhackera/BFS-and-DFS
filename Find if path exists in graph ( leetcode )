class Solution:
    
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        
        d = {}
        for u,v in edges:
            if u not in d:
                d[u] = [v]
                if v not in d:
                    d[v] = [u]
                else:
                    d[v].append(u)
            else:
                d[u].append(v)
                if v not in d:
                    d[v] = [u]
                else:
                    d[v].append(u)
        
        vis = [0]*n
        
        def dfs(source, dest, d, vis):
            
            if source == dest:
                return True
            vis[source] = 1
            
            for neighbour in d[source]:
                if not vis[neighbour]:
                    if dfs(neighbour, dest, d, vis): return True
                    
            return False
            
        return dfs(source, destination, d, vis)
