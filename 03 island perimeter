class Solution:
    def dfs(self, grid, i, j):
       
        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] == 0:
            return 1
        
        if grid[i][j] == -1:
            return 0
        
        grid[i][j] = -1
        
        return self.dfs(grid, i, j+1) + self.dfs(grid, i, j-1) + self.dfs(grid, i+1, j) + self.dfs(grid, i-1, j)
        
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        
        global count
        n = len(grid)
        m = len(grid[0])
        
        for i in range(n):
            for j in range(m):
                
                if grid[i][j] == 1:
                    return self.dfs(grid, i, j)
                    
